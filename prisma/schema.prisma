// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
}

model Invoice {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime
  paymentDue   DateTime
  description  String
  paymentTerms Int
  clientName   String
  clientEmail  String
  status       String
  holder       User      @relation(fields: [holderId], references: [id])
  holderId     Int
  senderAddress  SenderAddress @relation(fields: [senderAddressId], references: [id])
  senderAddressId Int
  clientAddress  ClientAddress @relation(fields: [clientAddressId], references: [id])
  clientAddressId Int
  items        Item[]
  total        Float 
}

model SenderAddress {
  id       Int      @id @default(autoincrement())
  street   String
  city     String
  postCode String
  country  String
  invoices Invoice[]
}

model ClientAddress {
  id       Int      @id @default(autoincrement())
  street   String
  city     String
  postCode String
  country  String
  invoices Invoice[]
}

model Item {
  id       Int      @id @default(autoincrement())
  name     String
  quantity Int
  price    Float  
  total    Float  
  invoice  Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId Int
}